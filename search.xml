<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker部署应用指南</title>
    <url>/2020/04/02/Docker%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="一、Docker的安装"><a href="#一、Docker的安装" class="headerlink" title="一、Docker的安装"></a>一、Docker的安装</h2><p>Docker的安装在不通操作系统下有不同的安装方式</p>
<h3 id="1-win7、win8安装docker"><a href="#1-win7、win8安装docker" class="headerlink" title="1.win7、win8安装docker"></a>1.win7、win8安装docker</h3><p>win7、win8 等需要利用 docker toolbox 来安装，国内可以使用阿里云的镜像来下载下载地址：<a href="http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/" target="_blank" rel="noopener">http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/</a>  (没有安装git的则需勾选Git for Windows)</p>
<p><img src="/2020/04/02/Docker%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97/1.png" alt></p>
<p>安装完成后桌面会有这三个程序</p>
<a id="more"></a>
<p><img src="/2020/04/02/Docker%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97/2.png" alt></p>
<p>点击 Docker QuickStart 图标来启动 Docker Toolbox 终端，如果docker安装成功则会出现下图</p>
<p><img src="/2020/04/02/Docker%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97/3.jpg" alt></p>
<p>（其中 【192.168.99.100】是VirtualBox中名字为【default】虚拟机的ip地址。）</p>
<h3 id="2-win10安装docker"><a href="#2-win10安装docker" class="headerlink" title="2.win10安装docker"></a>2.win10安装docker</h3><p>Docker for Windows分为企业版&gt;教育版&gt;专业版&gt;家庭版。（家庭版的不能开启Hyper-V，所以最低要专业版）</p>
<p>如果系统不符合运行Docker for Windows的要求，则可以安装Docker Toolbox，Dockbox Toolbox使用Oracle Virtual Box而不是Hyper-V。</p>
<p>在控制面板&gt;程序和功能&gt;打开或关闭Windows功能勾选Hyper-V </p>
<p>然后在CMD下运行此命令开启Hyper-V</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure>

<p>这样就可以下载安装包了，在docker官网下载Docker for Windows  <a href="https://www.docker.com/get-started" target="_blank" rel="noopener">https://www.docker.com/get-started</a></p>
<p>下载完进行安装启动，右下角会有小图标出现显示Docker Desktop is running  就说明docker启动好了。</p>
<p><img src="/2020/04/02/Docker%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97/4.png" alt></p>
<h3 id="3-linux下安装docker"><a href="#3-linux下安装docker" class="headerlink" title="3.linux下安装docker"></a>3.linux下安装docker</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">* 安装依赖包</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 </span><br><span class="line"></span><br><span class="line">* 设置阿里云镜像源</span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo </span><br><span class="line"></span><br><span class="line">* 安装 Docker-CE</span><br><span class="line">yum install docker-ce</span><br><span class="line"></span><br><span class="line">* 启动 Docker-CE</span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h2 id="二、制作docker镜像"><a href="#二、制作docker镜像" class="headerlink" title="二、制作docker镜像"></a>二、制作docker镜像</h2><h3 id="1-通过dockerfile在本地制作镜像"><a href="#1-通过dockerfile在本地制作镜像" class="headerlink" title="1.通过dockerfile在本地制作镜像"></a>1.通过dockerfile在本地制作镜像</h3><p>  创建一个文件夹，里面放入打包好的war或者jar包，还需放入docekrfile文件，然后通过docker bulid命令来制作镜像</p>
<p>Dockerfile文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line">ADD blog-2.2.0.RELEASE.jar app.jar</span><br><span class="line"></span><br><span class="line">ADD application.yml &#x2F;</span><br><span class="line"></span><br><span class="line">RUN bash -c &#39;touch &#x2F;app.jar&#39;</span><br><span class="line"></span><br><span class="line">EXPOSE 8084</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [ &quot;java&quot;, &quot;-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom&quot;, &quot;-jar&quot;, &quot;&#x2F;app.jar&quot; ]</span><br></pre></td></tr></table></figure>

<p> 在dockerfile当前路径下输入命令 ：docker build -t [镜像名称] [本地路径] 命令来制作镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build –t mytest .</span><br></pre></td></tr></table></figure>

<h3 id="2-利用maven插件来进行制作镜像，并推送到远程仓库中（阿里云仓库）"><a href="#2-利用maven插件来进行制作镜像，并推送到远程仓库中（阿里云仓库）" class="headerlink" title="2.利用maven插件来进行制作镜像，并推送到远程仓库中（阿里云仓库）"></a>2.利用maven插件来进行制作镜像，并推送到远程仓库中（阿里云仓库）</h3><p>在项目的pom.xml中加入插件信息,再配置maven的setting.xml在servers节点下添加阿里云仓库的账号信息。</p>
<p>pom.xmlr如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--镜像名称--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.repostory&#125;/$&#123;docker.registry.name&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--指定标签--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">imageTags</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>blog2<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">imageTags</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 指定Dockerfile所在的路径 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>./<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">serverId</span>&gt;</span>docker-aliyun<span class="tag">&lt;/<span class="name">serverId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">registryUrl</span>&gt;</span>$&#123;docker.repostory&#125;<span class="tag">&lt;/<span class="name">registryUrl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">pushImage</span>&gt;</span>true<span class="tag">&lt;/<span class="name">pushImage</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>maven的setting.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--maven的pom中可以根据这个id找到这个server节点的配置--&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>docker-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--这里是在阿里云注册的账号--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--这里是在阿里云注册的密码--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这是在阿里云注册时填写的邮箱--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>xx@qq.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、镜像的拉取、导入、导出"><a href="#三、镜像的拉取、导入、导出" class="headerlink" title="三、镜像的拉取、导入、导出"></a>三、镜像的拉取、导入、导出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*镜像的拉取 &#x2F;&#x2F;默认在docker Hub中拉取镜像</span><br><span class="line">docker pull [镜像名称]:[镜像版本号]</span><br><span class="line"></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;kinggrid&#x2F;yypt:[镜像版本号] </span><br><span class="line"></span><br><span class="line">例：docker pull redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*镜像的导出</span><br><span class="line">docker save -o [.tar文件的名称] [镜像名称]  （导出镜像）</span><br><span class="line"></span><br><span class="line">例： docker save -o images.tar myblog </span><br><span class="line">（docker export -o images.tar myblog （导出容器））</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*镜像的导入</span><br><span class="line"></span><br><span class="line">docker load -i images.tar   导入镜像</span><br><span class="line">（docker import images.tar myblog （导出容器））</span><br></pre></td></tr></table></figure>

<h2 id="四、容器部署"><a href="#四、容器部署" class="headerlink" title="四、容器部署"></a>四、容器部署</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*容器部署</span><br><span class="line"></span><br><span class="line">docker run -d -p [宿主机的端口号]:[容器的端口号] -v [挂载的本地路径]:[容器内部路径] --name&#x3D;[命名容器的名称] [镜像名] </span><br><span class="line"> </span><br><span class="line">例：</span><br><span class="line">docker run -d -p 8084:8084 -v &quot;G:&#x2F;dockerfile&#x2F;application.yml&quot;:&#x2F;application.yml --name&#x3D;myblog myblog</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>通过bean自动生成xml</title>
    <url>/2020/04/14/%E9%80%9A%E8%BF%87bean%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90xml/</url>
    <content><![CDATA[<h2 id="实现bean动态生成xml报文（只需修改bean上变量的标签，不用修改别的代码）"><a href="#实现bean动态生成xml报文（只需修改bean上变量的标签，不用修改别的代码）" class="headerlink" title="实现bean动态生成xml报文（只需修改bean上变量的标签，不用修改别的代码）"></a>实现bean动态生成xml报文（只需修改bean上变量的标签，不用修改别的代码）</h2><p>最近项目中需要调用webService接口，请求时会传送xml报文，查阅了网上很多资料发现每次不一样的xml格式都需要修改生成xml的方法里的代码，并没有真正的做到通过bean来动态生成xml报文，因此现开发一个不需要修改生成xml的方法来动态生成xml报文(提示：此方法只适合三层嵌套的xml报文，如需更多嵌套则需要进行改进)</p>
<p>1.添加所需的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jdom<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jdom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.编写能够判断xml层级的标签（可自己随意命名做区分）</p>
<ul>
<li>生成Root标签类，来代表当前bean里的变量哪一个是根节点</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里注意:RetentionPolicy需要手动导包</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Root &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>生成First标签类，来代表当前bean里的变量哪一个是子节点</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> First &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.编写动态生成xml的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jdom2.Document;</span><br><span class="line"><span class="keyword">import</span> org.jdom2.Element;</span><br><span class="line"><span class="keyword">import</span> org.jdom2.output.Format;</span><br><span class="line"><span class="keyword">import</span> org.jdom2.output.XMLOutputter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.annotation.First;</span><br><span class="line"><span class="keyword">import</span> com.annotation.Root;</span><br><span class="line"><span class="keyword">import</span> com.entity.NodeInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanToXmlUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 通过bean自动生成xml(只满足于三层)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span>  &lt;T&gt; <span class="function">String <span class="title">beanToXml</span><span class="params">(T t)</span> <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException </span>&#123;</span><br><span class="line">		String xml = <span class="string">""</span>;</span><br><span class="line">		Element xmlRoot = <span class="keyword">null</span>;</span><br><span class="line">		Class&lt;?&gt; xmlClass = t.getClass();</span><br><span class="line">		Map&lt;String,NodeInfo&gt; firstMap = <span class="keyword">new</span> HashMap&lt;String,NodeInfo&gt;();</span><br><span class="line">		<span class="keyword">for</span>(Field field : xmlClass.getDeclaredFields())&#123;</span><br><span class="line">			field.setAccessible(<span class="keyword">true</span>); <span class="comment">// true 能够取到到类中的私有属性,默认为false</span></span><br><span class="line">			<span class="keyword">if</span>(field.isAnnotationPresent(Root<span class="class">.<span class="keyword">class</span>))</span>&#123;</span><br><span class="line">				xmlRoot = <span class="keyword">new</span> Element(field.getName());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(field.isAnnotationPresent(First<span class="class">.<span class="keyword">class</span>))</span>&#123; </span><br><span class="line">				NodeInfo nodeInfo = <span class="keyword">new</span> NodeInfo();</span><br><span class="line">				nodeInfo.setParent(xmlRoot.getName());</span><br><span class="line">				nodeInfo.setValue(field.get(t));</span><br><span class="line">				firstMap.put(field.getName(), nodeInfo);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (Map.Entry&lt;String, NodeInfo&gt; entry : firstMap.entrySet()) &#123;</span><br><span class="line">			Element element = <span class="keyword">new</span> Element(entry.getKey());</span><br><span class="line">			<span class="keyword">if</span>(!((entry.getValue().getValue()) <span class="keyword">instanceof</span> String))&#123;</span><br><span class="line">				<span class="keyword">for</span>(Field fNode : entry.getValue().getValue().getClass().getDeclaredFields())&#123;</span><br><span class="line">					fNode.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">					<span class="keyword">if</span>(fNode.isAnnotationPresent(First<span class="class">.<span class="keyword">class</span>))</span>&#123;</span><br><span class="line">						Element elementNode = <span class="keyword">new</span> Element(fNode.getName());</span><br><span class="line">						elementNode.setText((String) fNode.get(entry.getValue().getValue()));</span><br><span class="line">						element.addContent(elementNode);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				element.setText((String)entry.getValue().getValue());</span><br><span class="line">			&#125;</span><br><span class="line">			xmlRoot.addContent(element);</span><br><span class="line">	    &#125;</span><br><span class="line">		Document doc = <span class="keyword">new</span> Document(xmlRoot);</span><br><span class="line">		XMLOutputter out = <span class="keyword">new</span> XMLOutputter();</span><br><span class="line">		Format format = Format.getCompactFormat();</span><br><span class="line">		format.setEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">		format.setIndent(<span class="string">"\t"</span>);</span><br><span class="line">		out.setFormat(format);<span class="comment">// 设置文件编码，默认为UTF-8</span></span><br><span class="line">		ByteArrayOutputStream bo = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			out.output(doc, bo);</span><br><span class="line">			xml = <span class="keyword">new</span> String(bo.toByteArray(), <span class="string">"UTF-8"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> xml;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//记录节点的相关信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NodeInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Object value;</span><br><span class="line">	<span class="keyword">private</span> String parent;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> parent;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(String parent)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.parent = parent;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> value;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.value = value;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.测试bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.annotation.First;</span><br><span class="line"><span class="keyword">import</span> com.annotation.Root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestXml</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Root</span></span><br><span class="line">	<span class="keyword">private</span> String Xml;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@First</span></span><br><span class="line">	<span class="keyword">private</span> UserData userData;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@First</span></span><br><span class="line">	<span class="keyword">private</span> String ext;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getXml</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Xml;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setXml</span><span class="params">(String xml)</span> </span>&#123;</span><br><span class="line">		Xml = xml;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> UserData <span class="title">getUserData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userData;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserData</span><span class="params">(UserData userData)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userData = userData;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getExt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ext;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExt</span><span class="params">(String ext)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.ext = ext;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.annotation.First;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@First</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@First</span></span><br><span class="line">	<span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException </span>&#123;</span><br><span class="line">	TestXml testXml= <span class="keyword">new</span> TestXml();</span><br><span class="line">	UserData userData = <span class="keyword">new</span> UserData();</span><br><span class="line">	userData.setName(<span class="string">"xxp"</span>);</span><br><span class="line">	userData.setAge(<span class="string">"18"</span>);</span><br><span class="line">	testXml.setExt(<span class="string">"xxp is 18"</span>);</span><br><span class="line">	testXml.setUserData(userData);</span><br><span class="line">	BeanToXmlUtil.beanToXml(testXml);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<p><img src="/2020/04/14/%E9%80%9A%E8%BF%87bean%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90xml/xml.png" alt></p>
<p>6.总结</p>
<p>优点：此篇方法能只修改bean上的标签来动态生成xml，无需修改生成xml中的代码</p>
<p>缺点：多层（3层以上）嵌套的问题，需要改进代码，深度大的话要不断的进行遍历</p>
<p>​            </p>
]]></content>
      <categories>
        <category>xml</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>xml</tag>
      </tags>
  </entry>
</search>
